{"version":3,"sources":["components/ProductDisplay.js","components/InputRow.js","components/LabelRow.js","components/EditItemForm.js","components/ProgressCircle.js","components/TotalsRow.js","components/CountsGrid.js","redux/settledStatus.js","components/SettlementSection.js","App.js","redux/store.js","index.js"],"names":["ProductDisplay","props","useState","noteHover","setNoteHover","posterInfo","price","imgUrl","note","className","onMouseEnter","onMouseLeave","src","alt","parseFloat","toFixed","InputRow","editMode","setEditMode","qtyAvailable","countIn","add","totalIn","comp","countOut","totalSold","gross","inputCountStore","setInputCountStore","settledStatus","useSelector","state","settlement","size","setCountStore","id","useEffect","prevInputCountStore","prevSetCountStore","enableEditMode","e","target","removeEditMode","updateValue","itemInfoArray","split","value","placeholder","autoFocus","onChange","onBlur","onClick","LabelRow","EditItemForm","setPosterInfo","toggleEditFormStatus","action","onSubmit","preventDefault","prevPosterInfo","htmlFor","type","name","defaultValue","rows","ProgressCircle","offset","width","height","stroke","strokeWidth","fill","r","cx","cy","style","zIndex","strokeDashoffset","TotalsRow","editFormStatus","setEditFormStatus","totals","prevEditFormStatus","CountsGrid","sizes","map","settledStatusSlice","createSlice","initialState","reducers","setStatusTrue","actions","SettlementSection","dispatch","useDispatch","toLocaleString","currency","App","countStore","setTotals","Object","keys","forEach","key","configureStore","reducer","settledStatusReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.350f4e76.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport {\n  FaPlus,\n  FaBoxOpen,\n  FaShoppingCart,\n  FaExclamationCircle,\n} from \"react-icons/fa\";\n\nfunction ProductDisplay(props) {\n  // track if user is hovering over exclamation to display note\n  const [noteHover, setNoteHover] = useState(false);\n\n  const { price, imgUrl, note } = props.posterInfo;\n\n  return (\n    <div className=\"product-display\">\n      <div className=\"left-product-display\">\n        <div className=\"product-label\">Poster</div>\n        {/* if a note exist show exclamation indicator for note on hover */}\n        {note === \"\" ? null : (\n          <FaExclamationCircle\n            className=\"poster-note-notification\"\n            onMouseEnter={() => {\n              setNoteHover(true);\n            }}\n            onMouseLeave={() => {\n              setNoteHover(false);\n            }}\n          />\n        )}\n        <img className=\"product-image\" src={imgUrl} alt=\"Concert Poster\" />\n        {/* display poster note if it exists and user hovers on exclamation indicator */}\n        {noteHover ? (\n          <div className=\"poster-note\">\n            <div className=\"poster-note-arrow-up\"></div>\n            <p>{note}</p>\n          </div>\n        ) : null}\n        <div className=\"icons\">\n          <FaPlus />\n          <FaBoxOpen />\n          <FaShoppingCart />\n        </div>\n      </div>\n      <div className=\"right-product-display\">\n        <p className=\"price\">${parseFloat(price).toFixed(2)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ProductDisplay;\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction InputRow(props) {\n  // tracks which input row element should be changed from a div to an input\n  const [editMode, setEditMode] = useState(false);\n\n  // keep track of counts per InputRow\n  const [inputCountStore, setInputCountStore] = useState({\n    qtyAvailable: 0,\n    countIn: 0,\n    add: 0,\n    totalIn: 0,\n    comp: 0,\n    countOut: 0,\n    totalSold: 0,\n    gross: 0,\n  });\n\n  // get settlement status from state\n  const { settledStatus } = useSelector((state) => state.settlement);\n\n  // destructure props to clean up code below\n  const { size, setCountStore } = props;\n  const { price, id } = props.posterInfo;\n  const {\n    qtyAvailable,\n    countIn,\n    add,\n    totalIn,\n    comp,\n    countOut,\n    totalSold,\n    gross,\n  } = inputCountStore;\n\n  // update inputCountStore when a value changes\n  useEffect(() => {\n    setInputCountStore((prevInputCountStore) => {\n      return {\n        ...prevInputCountStore,\n        totalIn: +countIn + +add,\n        totalSold: +totalIn - +countOut - +comp,\n        gross: +totalSold * +price,\n        qtyAvailable: +countOut - +countIn,\n      };\n    });\n  }, [\n    qtyAvailable,\n    countIn,\n    add,\n    comp,\n    countOut,\n    totalIn,\n    setCountStore,\n    price,\n    totalSold,\n  ]);\n\n  // update countStore when a value changes\n  useEffect(() => {\n    setCountStore((prevSetCountStore) => {\n      return {\n        ...prevSetCountStore,\n        [size]: {\n          totalIn: totalIn,\n          comp: comp,\n          countOut: +countOut,\n          totalSold: totalSold,\n          gross: gross,\n        },\n      };\n    });\n  }, [totalIn, comp, countOut, totalSold, gross, size, setCountStore]);\n\n  // sets which input row element should be changed from a div to an input\n  // if settled status is true, no edits can be made\n  const enableEditMode = (e) => {\n    if (!settledStatus) {\n      setEditMode(e.target.id);\n    } else setEditMode(false);\n  };\n\n  // unsets which input row element should be changed into an input - turns entire row back to divs\n  const removeEditMode = (e) => {\n    setEditMode(false);\n  };\n\n  // changes value in inputCountStore based on id and input element\n  const updateValue = (e) => {\n    // itemInfoArray = ['itemID', 'itemSize', 'inputElement']\n    const itemInfoArray = e.target.id.split(\":\");\n    setInputCountStore((prevInputCountStore) => {\n      return { ...prevInputCountStore, [itemInfoArray[2]]: e.target.value };\n    });\n  };\n\n  // all black-text, green-text, red-text elements below are conditionally rendered as inputs instead of divs based on the value of editMode in state\n  // all other elements are just divs to display the value in the count grid\n  return (\n    <div className=\"input-row\">\n      <div className=\"input-element black-text size\">{size}</div>\n      <div className=\"input-element black-text\">{qtyAvailable}</div>\n\n      {editMode === `${id}:${size}:countIn` ? (\n        <input\n          id={`${id}:${size}:countIn`}\n          placeholder={countIn}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element black-text\"\n          id={`${id}:${size}:countIn`}\n          onClick={enableEditMode}\n        >\n          {countIn}\n        </div>\n      )}\n\n      {editMode === `${id}:${size}:add` ? (\n        <input\n          id={`${id}:${size}:add`}\n          placeholder={add}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element green-text\"\n          id={`${id}:${size}:add`}\n          onClick={enableEditMode}\n        >\n          {add}\n        </div>\n      )}\n\n      <div className=\"input-element blue-text\">{totalIn}</div>\n\n      {editMode === `${id}:${size}:comp` ? (\n        <input\n          id={`${id}:${size}:comp`}\n          placeholder={comp}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element red-text\"\n          id={`${id}:${size}:comp`}\n          onClick={enableEditMode}\n        >\n          {comp}\n        </div>\n      )}\n\n      {editMode === `${id}:${size}:countOut` ? (\n        <input\n          id={`${id}:${size}:countOut`}\n          placeholder={countOut}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element black-text\"\n          id={`${id}:${size}:countOut`}\n          onClick={enableEditMode}\n        >\n          {countOut}\n        </div>\n      )}\n\n      <div className=\"input-element blue-text\">{totalSold}</div>\n      <div className=\"input-element blue-text\">{gross.toFixed(2)}</div>\n    </div>\n  );\n}\n\nexport default InputRow;\n","function LabelRow() {\n  return (\n    <div className=\"label-row\">\n      <div className=\"label-element\"></div>\n      <div className=\"label-element\">QTY Avail.</div>\n      <div className=\"label-element\">Count In</div>\n      <div className=\"label-element\">Add</div>\n      <div className=\"label-element\">Total in</div>\n      <div className=\"label-element\">Comp</div>\n      <div className=\"label-element\">Count Out</div>\n      <div className=\"label-element\">Total Sold</div>\n      <div className=\"label-element\">Gross</div>\n    </div>\n  );\n}\n\nexport default LabelRow;\n","function EditItemForm(props) {\n  const { price, note } = props.posterInfo;\n  const { setPosterInfo, toggleEditFormStatus } = props;\n\n  const submitEditForm = (e) => {\n    e.preventDefault();\n    setPosterInfo((prevPosterInfo) => {\n      return {\n        ...prevPosterInfo,\n        price: e.target[0].value,\n        note: e.target[1].value,\n      };\n    });\n    toggleEditFormStatus();\n  };\n\n  return (\n    <div className=\"edit-item-pop-up\">\n      <div className=\"edit-item-arrow-up\"></div>\n      <div className=\"edit-form\">\n        <p>Edit Item</p>\n        <form action=\"#\" onSubmit={submitEditForm}>\n          <label htmlFor=\"price\">Price</label>\n          <input\n            autoFocus\n            className=\"price-input\"\n            type=\"text\"\n            name=\"price\"\n            defaultValue={price}\n          />\n          <label htmlFor=\"note\">Note</label>\n          <textarea\n            className=\"note-input\"\n            type=\"text\"\n            name=\"note\"\n            defaultValue={note}\n            rows=\"4\"\n          />\n          <button>Update</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default EditItemForm;\n","function ProgressCircle(props) {\n  const { totalSold, totalIn } = props;\n  const offset = 138 - (138 * totalSold) / totalIn;\n\n  return (\n    <div className=\"percent-circle\">\n      <svg width=\"50\" height=\"50\">\n        <circle\n          className=\"background-ring\"\n          stroke=\"#979797\"\n          strokeWidth=\"4\"\n          fill=\"transparent\"\n          r=\"22\"\n          cx=\"25\"\n          cy=\"25\"\n          style={{ zIndex: \"-1\" }}\n        />\n        <circle\n          className=\"percent-ring\"\n          stroke=\"#00c7fc\"\n          strokeWidth=\"4\"\n          fill=\"transparent\"\n          r=\"22\"\n          cx=\"25\"\n          cy=\"25\"\n          style={{ strokeDashoffset: offset || 0 }}\n        />\n      </svg>\n      <p>{totalSold}</p>\n    </div>\n  );\n}\n\nexport default ProgressCircle;\n","import { useState } from \"react\";\nimport EditItemForm from \"./EditItemForm\";\nimport ProgressCircle from \"./ProgressCircle\";\n\nfunction TotalsRow(props) {\n  // keep track of whether to display form to edit item's price or note\n  const [editFormStatus, setEditFormStatus] = useState(false);\n\n  const { posterInfo, setPosterInfo } = props;\n  const { totalIn, comp, countOut, totalSold, gross } = props.totals;\n\n  const toggleEditFormStatus = () => {\n    setEditFormStatus((prevEditFormStatus) => !prevEditFormStatus);\n  };\n\n  return (\n    <>\n      <div className=\"totals-row\">\n        <div className=\"button-container\">\n          <button className=\"more-rows-button\" onClick={toggleEditFormStatus}>\n            More\n          </button>\n        </div>\n        <div className=\"totals-element blue-text\">{totalIn}</div>\n        <div className=\"totals-element red-text\">{comp}</div>\n        <div className=\"totals-element black-text\">{countOut}</div>\n        <div className=\"totals-element\">\n          <ProgressCircle totalIn={totalIn} totalSold={totalSold} />\n        </div>\n        <div className=\"totals-element blue-text\">${gross.toFixed(2)}</div>\n      </div>\n      <div className=\"form-row\">\n        {editFormStatus ? (\n          <EditItemForm\n            posterInfo={posterInfo}\n            setPosterInfo={setPosterInfo}\n            toggleEditFormStatus={toggleEditFormStatus}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default TotalsRow;\n","import InputRow from \"../components/InputRow\";\nimport LabelRow from \"../components/LabelRow\";\nimport TotalsRow from \"../components/TotalsRow\";\n\nfunction CountsGrid(props) {\n  const { setCountStore, posterInfo, setPosterInfo, totals } = props;\n\n  return (\n    <div className=\"counts-grid\">\n      <LabelRow></LabelRow>\n      {/* Create an InputRow for every size in the poster object in state */}\n      {posterInfo.sizes.map((size) => {\n        return (\n          <InputRow\n            key={size}\n            size={size}\n            setCountStore={setCountStore}\n            posterInfo={posterInfo}\n          ></InputRow>\n        );\n      })}\n      <TotalsRow\n        posterInfo={posterInfo}\n        setPosterInfo={setPosterInfo}\n        totals={totals}\n      ></TotalsRow>\n    </div>\n  );\n}\n\nexport default CountsGrid;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const settledStatusSlice = createSlice({\n  name: \"settlement\",\n  initialState: {\n    settledStatus: false,\n  },\n  reducers: {\n    setStatusTrue: (state) => {\n      state.settledStatus = true;\n    },\n  },\n});\n\nexport const { setStatusTrue } = settledStatusSlice.actions;\n\nexport default settledStatusSlice.reducer;\n","import { useDispatch } from \"react-redux\";\nimport { setStatusTrue } from \"../redux/settledStatus\";\n\nfunction SettlementSection(props) {\n  const { totalSold, gross } = props.totals;\n\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"settlement-section\">\n      <div className=\"settlement-inner\">\n        <p className=\"settlement-section-title\">TOTAL</p>\n        <div className=\"units-sold-circle\">\n          <p className=\"units-sold\">{totalSold}</p>\n          <p>Units</p>\n          <p>Sold</p>\n        </div>\n        <p className=\"gross\">\n          {parseFloat(gross).toLocaleString(\"en\", {\n            // currency not actually usd - formating for display purposes only\n            currency: \"usd\",\n            style: \"currency\",\n          })}\n        </p>\n        <button\n          onClick={() => {\n            dispatch(setStatusTrue());\n          }}\n        >\n          SETTLE\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SettlementSection;\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport ProductDisplay from \"./components/ProductDisplay\";\nimport CountsGrid from \"./components/CountsGrid\";\nimport SettlementSection from \"./components/SettlementSection\";\n\nfunction App() {\n  // keep track of whether counts grid can be modified or not\n\n  // keep track of poster info\n  const [posterInfo, setPosterInfo] = useState({\n    id: \"001\",\n    sizes: [\"small\", \"large\"],\n    price: 10,\n    note: \"Hamilton, ON Pier 8 Poster June 22, 2019\",\n    imgUrl:\n      \"https://cdn.shopify.com/s/files/1/0549/2034/7823/products/the-national-hamilton-on-pier-8-poster_4dd452d6-323a-420d-8cef-c0f21c5df80c_5000x.png?v=1635448244\",\n  });\n\n  // keep track of counts, quantities,... per size needed for calculating totals in counts grid\n  const [countStore, setCountStore] = useState({});\n\n  // keep track of totals for displaying in TotalsRow and SettlementSection\n  const [totals, setTotals] = useState({\n    totalIn: 0,\n    comp: 0,\n    countOut: 0,\n    totalSold: 0,\n    gross: 0,\n  });\n\n  // update totals upon countStore change\n  useEffect(() => {\n    const totals = { totalIn: 0, comp: 0, countOut: 0, totalSold: 0, gross: 0 };\n    Object.keys(countStore).forEach((key) => {\n      totals.totalIn += countStore[key].totalIn;\n      totals.comp += countStore[key].comp;\n      totals.countOut += countStore[key].countOut;\n      totals.totalSold += countStore[key].totalSold;\n      totals.gross += countStore[key].gross;\n    });\n    setTotals(totals);\n  }, [countStore]);\n\n  return (\n    <div className=\"App\">\n      <ProductDisplay posterInfo={posterInfo} />\n      <div>\n        <CountsGrid\n          setCountStore={setCountStore}\n          posterInfo={posterInfo}\n          setPosterInfo={setPosterInfo}\n          totals={totals}\n        />\n        <SettlementSection totals={totals} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport settledStatusReducer from \"./settledStatus\";\n\nexport default configureStore({\n  reducer: {\n    settlement: settledStatusReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}