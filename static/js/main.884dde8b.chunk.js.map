{"version":3,"sources":["components/ProductDisplay.js","components/InputRow.js","components/LabelRow.js","components/EditItemForm.js","components/ProgressCircle.js","components/TotalsRow.js","components/CountsGrid.js","components/SettlementSection.js","App.js","index.js"],"names":["ProductDisplay","props","useState","noteHover","setNoteHover","posterInfo","price","imgUrl","description","className","onMouseEnter","onMouseLeave","src","alt","parseFloat","toFixed","InputRow","editMode","setEditMode","setCountScore","settledStatus","countStore","qtyAvailable","countIn","add","totalIn","comp","countOut","totalSold","gross","useEffect","prevCountScore","enableEditMode","e","target","id","removeEditMode","updateValue","prevSetCountScore","value","onClick","placeholder","autoFocus","onChange","onBlur","LabelRow","EditItemForm","setPosterInfo","toggleEditFormStatus","action","onSubmit","preventDefault","prevPosterInfo","htmlFor","type","name","defaultValue","rows","ProgressCircle","offset","width","height","stroke","fill","r","cx","cy","style","strokeDashoffset","TotalsRow","editFormStatus","setEditFormStatus","prevEditFormStatus","CountsGrid","SettlementSection","setSettledStatus","toLocaleString","currency","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.884dde8b.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport {\n  FaPlus,\n  FaBoxOpen,\n  FaShoppingCart,\n  FaExclamationCircle,\n} from \"react-icons/fa\";\n\nfunction ProductDisplay(props) {\n  const [noteHover, setNoteHover] = useState(false);\n  const { price, imgUrl, description } = props.posterInfo;\n\n  return (\n    <div className=\"product-display\">\n      <div className=\"left-product-display\">\n        {/* if a description/note exist show exclamation indicator for note on hover */}\n        {description === \"\" ? null : (\n          <FaExclamationCircle\n            className=\"poster-note-notification\"\n            onMouseEnter={() => {\n              setNoteHover(true);\n            }}\n            onMouseLeave={() => {\n              setNoteHover(false);\n            }}\n          />\n        )}\n        <img className=\"product-image\" src={imgUrl} alt=\"Concert Poster\" />\n        {/* display poster note if it exists and user hovers on exclamation indicator */}\n        {noteHover ? (\n          <div className=\"poster-note\">\n            <div className=\"poster-note-arrow-up\"></div>\n            <p>{description}</p>\n          </div>\n        ) : null}\n        <div className=\"icons\">\n          <FaPlus />\n          <FaBoxOpen />\n          <FaShoppingCart />\n        </div>\n      </div>\n      <div className=\"right-product-display\">\n        <p className=\"price\">${parseFloat(price).toFixed(2)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ProductDisplay;\n","import { useState, useEffect } from \"react\";\n\nfunction InputRow(props) {\n  // tracks which input row element should be changed from a div to an input\n  const [editMode, setEditMode] = useState(false);\n\n  // destructure props to clean up code below\n  const { setCountScore, settledStatus } = props;\n  const { price } = props.posterInfo;\n  const {\n    qtyAvailable,\n    countIn,\n    add,\n    totalIn,\n    comp,\n    countOut,\n    totalSold,\n    gross,\n  } = props.countStore;\n\n  //update countScore when a value changes\n  useEffect(() => {\n    setCountScore((prevCountScore) => {\n      return {\n        ...prevCountScore,\n        totalIn: +countIn + +add,\n        totalSold: +totalIn - +countOut - +comp,\n        gross: +totalSold * +price,\n        qtyAvailable: +countOut - +countIn,\n      };\n    });\n  }, [\n    qtyAvailable,\n    countIn,\n    add,\n    comp,\n    countOut,\n    totalIn,\n    setCountScore,\n    price,\n    totalSold,\n  ]);\n\n  // sets which input row element should be changed from a div to an input\n  // if settled status is true, no edits can be made\n  const enableEditMode = (e) => {\n    if (!settledStatus) {\n      setEditMode(e.target.id);\n    } else setEditMode(false);\n  };\n\n  // unsets which input row element should be changed into an input - turns entire row back to divs\n  const removeEditMode = (e) => {\n    setEditMode(false);\n  };\n\n  // changes value in state for countStore\n  const updateValue = (e) => {\n    props.setCountScore((prevSetCountScore) => {\n      return { ...prevSetCountScore, [e.target.id]: e.target.value };\n    });\n  };\n\n  // all black-text, green-text, red-text elements below are conditionally rendered as inputs instead of divs based on the value of editMode in state\n  // all other elements are just divs to display the value in the count grid\n  return (\n    <div className=\"input-row\">\n      <div\n        className=\"input-element black-text\"\n        id=\"qtyAvailable\"\n        onClick={enableEditMode}\n      >\n        {qtyAvailable}\n      </div>\n\n      {editMode === \"countIn\" ? (\n        <input\n          id=\"countIn\"\n          placeholder={countIn}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element black-text\"\n          id=\"countIn\"\n          onClick={enableEditMode}\n        >\n          {countIn}\n        </div>\n      )}\n\n      {editMode === \"add\" ? (\n        <input\n          id=\"add\"\n          placeholder={add}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element green-text\"\n          id=\"add\"\n          onClick={enableEditMode}\n        >\n          {add}\n        </div>\n      )}\n\n      <div className=\"input-element blue-text\">{totalIn}</div>\n\n      {editMode === \"comp\" ? (\n        <input\n          id=\"comp\"\n          placeholder={comp}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element red-text\"\n          id=\"comp\"\n          onClick={enableEditMode}\n        >\n          {comp}\n        </div>\n      )}\n\n      {editMode === \"countOut\" ? (\n        <input\n          id=\"countOut\"\n          placeholder={countOut}\n          autoFocus\n          onChange={updateValue}\n          onBlur={removeEditMode}\n        ></input>\n      ) : (\n        <div\n          className=\"input-element black-text\"\n          id=\"countOut\"\n          onClick={enableEditMode}\n        >\n          {countOut}\n        </div>\n      )}\n\n      <div className=\"input-element blue-text\">{totalSold}</div>\n      <div className=\"input-element blue-text\">{gross.toFixed(2)}</div>\n    </div>\n  );\n}\n\nexport default InputRow;\n","function LabelRow() {\n  return (\n    <div className=\"label-row\">\n      <div className=\"label-element\">QTY Avail.</div>\n      <div className=\"label-element\">Count In</div>\n      <div className=\"label-element\">Add</div>\n      <div className=\"label-element\">Total in</div>\n      <div className=\"label-element\">Comp</div>\n      <div className=\"label-element\">Count Out</div>\n      <div className=\"label-element\">Total Sold</div>\n      <div className=\"label-element\">Gross</div>\n    </div>\n  );\n}\n\nexport default LabelRow;\n","function EditItemForm(props) {\n  const { price, description } = props.posterInfo;\n  const { setPosterInfo, toggleEditFormStatus } = props;\n\n  const submitEditForm = (e) => {\n    e.preventDefault();\n    setPosterInfo((prevPosterInfo) => {\n      return {\n        ...prevPosterInfo,\n        price: e.target[0].value,\n        description: e.target[1].value,\n      };\n    });\n    toggleEditFormStatus();\n  };\n\n  return (\n    <div className=\"edit-item-pop-up\">\n      <div className=\"edit-item-arrow-up\"></div>\n      <div className=\"edit-form\">\n        <p>Edit Item</p>\n        <form action=\"#\" onSubmit={submitEditForm}>\n          <label htmlFor=\"price\">Price</label>\n          <input\n            autoFocus\n            className=\"price-input\"\n            type=\"text\"\n            name=\"price\"\n            defaultValue={price}\n          />\n          <label htmlFor=\"description\">Description</label>\n          <textarea\n            className=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            defaultValue={description}\n            rows=\"4\"\n          />\n          <button>Update</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default EditItemForm;\n","function ProgressCircle(props) {\n  const { totalSold, totalIn } = props;\n  const offset = 138 - (138 * totalSold) / totalIn;\n\n  return (\n    <div className=\"percent-circle\">\n      <svg width=\"50\" height=\"50\">\n        <circle\n          className=\"percent-ring\"\n          stroke=\"#00c7fc\"\n          stroke-width=\"4\"\n          fill=\"transparent\"\n          r=\"22\"\n          cx=\"25\"\n          cy=\"25\"\n          style={{ strokeDashoffset: offset }}\n        />\n      </svg>\n      <p>{totalSold}</p>\n    </div>\n  );\n}\n\nexport default ProgressCircle;\n","import { useState } from \"react\";\nimport EditItemForm from \"./EditItemForm\";\nimport ProgressCircle from \"./ProgressCircle\";\n\nfunction TotalsRow(props) {\n  const { totalIn, comp, countOut, totalSold, gross } = props.countStore;\n  const { posterInfo, setPosterInfo } = props;\n  const [editFormStatus, setEditFormStatus] = useState(false);\n\n  const toggleEditFormStatus = () => {\n    setEditFormStatus((prevEditFormStatus) => !prevEditFormStatus);\n  };\n\n  return (\n    <>\n      <div className=\"totals-row\">\n        <div className=\"button-container\">\n          <button className=\"more-rows-button\" onClick={toggleEditFormStatus}>\n            More\n          </button>\n        </div>\n        <div className=\"totals-element blue-text\">{totalIn}</div>\n        <div className=\"totals-element red-text\">{comp}</div>\n        <div className=\"totals-element black-text\">{countOut}</div>\n        <ProgressCircle\n          className=\"totals-element\"\n          totalIn={totalIn}\n          totalSold={totalSold}\n        />\n        <div className=\"totals-element blue-text\">${gross.toFixed(2)}</div>\n      </div>\n      <div className=\"form-row\">\n        {editFormStatus ? (\n          <EditItemForm\n            posterInfo={posterInfo}\n            setPosterInfo={setPosterInfo}\n            toggleEditFormStatus={toggleEditFormStatus}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default TotalsRow;\n","import InputRow from \"../components/InputRow\";\nimport LabelRow from \"../components/LabelRow\";\nimport TotalsRow from \"../components/TotalsRow\";\n\nfunction CountsGrid(props) {\n  const {\n    countStore,\n    setCountScore,\n    posterInfo,\n    setPosterInfo,\n    settledStatus,\n  } = props;\n\n  return (\n    <div className=\"counts-grid\">\n      <LabelRow></LabelRow>\n      <InputRow\n        countStore={countStore}\n        setCountScore={setCountScore}\n        posterInfo={posterInfo}\n        settledStatus={settledStatus}\n      ></InputRow>\n      <TotalsRow\n        countStore={countStore}\n        posterInfo={posterInfo}\n        setPosterInfo={setPosterInfo}\n      ></TotalsRow>\n    </div>\n  );\n}\n\nexport default CountsGrid;\n","function SettlementSection(props) {\n  const { setSettledStatus } = props;\n  const { totalSold, gross } = props.countStore;\n\n  return (\n    <div className=\"settlement-section\">\n      <div className=\"settlement-inner\">\n        <p className=\"settlement-section-title\">TOTAL</p>\n        <div className=\"units-sold-circle\">\n          <p className=\"units-sold\">{totalSold}</p>\n          <p>Units</p>\n          <p>Sold</p>\n        </div>\n        <p className=\"gross\">\n          {parseFloat(gross).toLocaleString(\"en\", {\n            // currency not actually usd - formating for display purposes only\n            currency: \"usd\",\n            style: \"currency\",\n          })}\n        </p>\n        <button\n          onClick={() => {\n            setSettledStatus(true);\n          }}\n        >\n          SETTLE\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SettlementSection;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport ProductDisplay from \"./components/ProductDisplay\";\nimport CountsGrid from \"./components/CountsGrid\";\nimport SettlementSection from \"./components/SettlementSection\";\n\nfunction App() {\n  // keep track of whether counts grid can be modified or not\n  const [settledStatus, setSettledStatus] = useState(false);\n\n  // keep track of poster info\n  const [posterInfo, setPosterInfo] = useState({\n    id: \"001\",\n    price: 10,\n    description: \"Hamilton, ON Pier 8 Poster June 22, 2019\",\n    imgUrl:\n      \"https://cdn.shopify.com/s/files/1/0549/2034/7823/products/the-national-hamilton-on-pier-8-poster_4dd452d6-323a-420d-8cef-c0f21c5df80c_5000x.png?v=1635448244\",\n  });\n\n  // keep track of counts, quantities,... in counts grid\n  const [countStore, setCountScore] = useState({\n    qtyAvailable: 0,\n    countIn: 0,\n    add: 0,\n    totalIn: 0,\n    comp: 0,\n    countOut: 0,\n    totalSold: 0,\n    gross: 0,\n  });\n\n  return (\n    <div className=\"App\">\n      <ProductDisplay posterInfo={posterInfo} />\n      <div>\n        <CountsGrid\n          countStore={countStore}\n          setCountScore={setCountScore}\n          posterInfo={posterInfo}\n          setPosterInfo={setPosterInfo}\n          settledStatus={settledStatus}\n          setSettledStatus={setSettledStatus}\n        />\n        <SettlementSection\n          setSettledStatus={setSettledStatus}\n          countStore={countStore}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}